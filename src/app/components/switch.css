/*
 * CSS based on/inspired by: https://material-components-web.appspot.com/switch.html
 *
 * On/off switches toggle the state of a single settings option.
 * The option that the switch controls, as well as the state itâ€™s in, should be
 * made clear from the corresponding inline label. Switches take on the same
 * visual properties of the radio button.
 *
 * See: https://material.io/guidelines/components/selection-controls.html#selection-controls-switch
 */

@import '../styles/base/color.variables.css';
@import '../styles/base/typography.variables.css';
@import '../styles/base/elevation.variables.css';

:root {
  --switch-unchecked-track-color: #000000;
  --switch-unchecked-knob-color: #fafafa;
  --switch-unchecked-track-color-dark: #ffffff;
  --switch-disabled-knob-color: #bdbdbd;
  --switch-checked-position: calc(var(--base-line-height) * 0.5);
}

.SwitchSet {
  position: relative;
  display: flex;
  flex-wrap: wrap;
}

.SwitchField {
  position: relative;
  display: flex;
  margin-right: var(--space-s);
  white-space: nowrap;

  &:last-child {
    margin-right: 0;
  }

  & label {
    cursor: pointer;
    user-select: none;

    &:first-child:not(:only-child) {
      padding-right: var(--space-xs);
    }

    &:last-child:not(:only-child) {
      padding-left: var(--space-xs);
    }

    &.disabled {
      cursor: default;
      color: var(--text-color-disabled);
    }
  }
}

.SwitchSet--column {
  flex-direction: column;

  & .SwitchField {
    margin-right: 0;
  }
}

.Switch {
  position: relative;
  width: calc(var(--base-line-height) * 1.3);
  height: var(--base-line-height);

  & .Switch__background {
    display: block;
    position: relative;
    width: calc(var(--base-line-height) * 1.3);
    height: 100%;
    border-radius: 9px;
    outline: none;
    user-select: none;

    &::before {
      display: block;
      position: absolute;
      top: 50%;
      right: 0;
      bottom: 0;
      left: 0;
      transition: background-color 90ms ease, opacity 90ms ease;
      border-radius: 9px;
      background-color: var(--switch-unchecked-track-color);
      opacity: 0.38;
      content: "";
    }

    & .Switch__knob {
      box-shadow: var(--z2);
      display: block;
      position: absolute;
      top: 25%;
      left: -5%;
      height: var(--base-line-height);
      width: var(--base-line-height);
      transform: translateX(0) scale(0.86);
      transition: background-color 90ms ease, transform 90ms ease;
      border-radius: 50%;
      z-index: 1;
      background-color: var(--switch-unchecked-knob-color);

      &::before {
        display: block;
        width: 100%;
        height: 100%;
        transform: scale(0);
        transition: transform 90ms ease;
        border-radius: 50%;
        background-color: #000000;
        content: "";
      }
    }
  }

  & .Switch__native {
    cursor: pointer;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform: scale(2, 2); /* Increase touch area */
    margin: calc(var(--base-line-height) * 0.3) 0 calc(var(--base-line-height) * -0.3);
    padding: 0;
    opacity: 0;
    z-index: 2;

    &:disabled + .Switch__background {
      &::before {
        background-color: var(--switch-unchecked-track-color);
        opacity: 0.12;
      }

      & .Switch__knob {
        background-color: var(--switch-disabled-knob-color);
        cursor: default;
      }
    }

    &:checked + .Switch__background {
      &::before {
        opacity: 0.12;
      }

      & .Switch__knob {
        transform: translateX(var(--switch-checked-position)) scale(0.86);
      }
    }

    &:checked:not(:disabled) + .Switch__background {
      & .Switch__knob {
        background-color: var(--text-color-primary);
      }
    }

    &:hover:not(:disabled) + .Switch__background {
      & .Switch__knob::before {
        opacity: 0.1;
        transform: scale(2, 2);
      }
    }

    &:focus:not(:disabled) + .Switch__background {
      & .Switch__knob::before {
        opacity: 0.15;
        transform: scale(2, 2);
      }
    }

    &:active:not(:disabled) + .Switch__background {
      & .Switch__knob::before {
        transform: scale(2, 2);
        opacity: 0.2;
      }
    }
  }
}

.SwitchPrimary {
  composes: Switch;

  /* stylelint-disable-next-line no-descending-specificity */
  & .Switch__background {

    /* stylelint-disable-next-line no-descending-specificity */
    & .Switch__knob {

      /* stylelint-disable-next-line no-descending-specificity */
      &::before {
        background-color: var(--color-primary);
      }
    }
  }

  & .Switch__native {
    &:checked:not(:disabled) + .Switch__background {
      &::before {
        opacity: 0.5;
        background-color: var(--color-primary);
      }

      & .Switch__knob {
        background-color: var(--color-primary);
      }
    }

    &:hover:not(:disabled) + .Switch__background {
      & .Switch__knob::before {
        opacity: 0.2;
      }
    }

    &:focus:not(:disabled) + .Switch__background {
      & .Switch__knob::before {
        opacity: 0.25;
      }
    }

    &:active:not(:disabled) + .Switch__background {
      & .Switch__knob::before {
        opacity: 0.3;
      }
    }
  }
}

.SwitchSecondary {
  composes: Switch;

  /* stylelint-disable-next-line no-descending-specificity */
  & .Switch__background {

    /* stylelint-disable-next-line no-descending-specificity */
    & .Switch__knob {

      /* stylelint-disable-next-line no-descending-specificity */
      &::before {
        background-color: var(--color-secondary);
      }
    }
  }

  & .Switch__native {
    &:checked:not(:disabled) + .Switch__background {
      &::before {
        opacity: 0.5;
        background-color: var(--color-secondary);
      }

      & .Switch__knob {
        background-color: var(--color-secondary);
      }
    }

    &:hover:not(:disabled) + .Switch__background {
      & .Switch__knob::before {
        opacity: 0.2;
      }
    }

    &:focus:not(:disabled) + .Switch__background {
      & .Switch__knob::before {
        opacity: 0.25;
      }
    }

    &:active:not(:disabled) + .Switch__background {
      & .Switch__knob::before {
        opacity: 0.3;
      }
    }
  }
}
